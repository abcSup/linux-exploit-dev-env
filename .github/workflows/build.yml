name: Build
on: [workflow_dispatch]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # TODO: Add 20.04
        # TODO: Build all LTS and latest kernels
        os: [ubuntu-22.04]
        ack: [0, 1]
        arch: [arm64, x86_64]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    env:
      ACK: ${{ matrix.ack }}
      ARCH: ${{ matrix.arch }}
    outputs:
      SHORT_HASH: ${{ steps.vars.outputs.SHORT_HASH }}
    steps:

    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Set output variables
      id: vars
      run: |
        set -x

        SHORT_HASH=$(git rev-parse --short HEAD)

        if [ $ACK -eq 0 ]; then
          KERNEL_TYPE=linux
          OUT_DIR=out/linux/${ARCH}
        else
          KERNEL_TYPE=ack
          OUT_DIR=out/ack/common/${ARCH}
        fi

        KERNEL_IMAGE="${OUT_DIR}/arch/${ARCH}/boot"

        if [ $ARCH == x86_64 ]; then
          KERNEL_IMAGE="$KERNEL_IMAGE/bzImage"
        elif [ $ARCH == arm64 ]; then
          KERNEL_IMAGE="$KERNEL_IMAGE/Image"
        fi

        echo "SHORT_HASH=$SHORT_HASH" >> $GITHUB_OUTPUT
        echo "OUT_DIR=$OUT_DIR" >> $GITHUB_OUTPUT
        echo "KERNEL_TYPE=$KERNEL_TYPE" >> $GITHUB_OUTPUT
        echo "KERNEL_IMAGE=$KERNEL_IMAGE" >> $GITHUB_OUTPUT

    # TODO: We can make this step faster by splitting up ACK, arm64, and x86 dependencies
    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install -y \
          qemu \
          qemu-system-x86 \
          qemu-system-arm \
          build-essential \
          bc \
          bison \
          flex \
          git \
          libelf-dev \
          libssl-dev \
          ncurses-dev \
          llvm \
          clang \
          clang-tools \
          lld \
          lz4 \
          pahole \
          binutils-aarch64-linux-gnu \
          gcc-aarch64-linux-gnu

    - name: Initialize rootfs
      run: |
        make rootfs-init

    - name: Build kernel
      run: |
        make -j$(nproc) linux

    - name: Run kernel
      run: |
        mkdir shared
        echo poweroff > shared/init.sh
        chmod +x shared/init.sh
        make run

    - run: |
        cp ${{ steps.vars.outputs.KERNEL_IMAGE }} \
          ${{ steps.vars.outputs.KERNEL_IMAGE }}-${{ steps.vars.outputs.KERNEL_TYPE }}-${{ matrix.arch }}
        cp ${{ steps.vars.outputs.OUT_DIR }}/vmlinux ${{ steps.vars.outputs.OUT_DIR }}/vmlinux-${{ steps.vars.outputs.KERNEL_TYPE }}-${{ matrix.arch }}

    - name: Upload kernel artifact
      uses: actions/upload-artifact@v3
      with:
        name: kernel-image
        path: |
          ${{ steps.vars.outputs.KERNEL_IMAGE }}-${{ steps.vars.outputs.KERNEL_TYPE }}-${{ matrix.arch }}
          ${{ steps.vars.outputs.OUT_DIR }}/vmlinux-${{ steps.vars.outputs.KERNEL_TYPE }}-${{ matrix.arch }}

    - name: Upload rootfs artifact
      uses: actions/upload-artifact@v3
      with:
        name: rootfs
        path: rootfs/rootfs-${{ matrix.arch }}.img

  release:
    runs-on: ubuntu-22.04
    needs: build
    permissions:
      contents: write
    steps:

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3

    - run: ls -lR

    - name: Set output variables
      id: vars
      run: |
        set -x

        echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

    - name: Publish release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        tag_name: ${{ steps.vars.outputs.DATE }}-${{ needs.build.outputs.SHORT_HASH }}
        files: |
          kernel-image/*
          rootfs/*
