name: Build
on: [workflow_dispatch]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # TODO: Add 20.04
        os: [ubuntu-22.04]
        kernel: [{ack: 0, version: 5.10.164}, {ack: 0, version: 5.15.89}, {ack: 0, version: 6.1.7}, {ack: 1, version: android13-5.10-lts}]
        arch: [arm64, x86_64]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 100
    env:
      ACK: ${{ matrix.kernel.ack }}
      ARCH: ${{ matrix.arch }}
    outputs:
      SHORT_HASH: ${{ steps.vars.outputs.SHORT_HASH }}
    steps:

    - uses: actions/checkout@v3

    - name: Set output variables
      id: vars
      run: |
        set -x

        SHORT_HASH=$(git rev-parse --short HEAD)

        if [ $ACK -eq 0 ]; then
          KERNEL_TYPE=linux
          OUT_DIR=out/linux/${ARCH}
        else
          KERNEL_TYPE=ack
          OUT_DIR=out/ack/common/${ARCH}
        fi

        if [ $ARCH == x86_64 ]; then
          # We need to use the real image in the x86 folder because caching
          # doesn't work with symlinks
          KERNEL_IMAGE="${OUT_DIR}/arch/x86/boot/bzImage"
        elif [ $ARCH == arm64 ]; then
          KERNEL_IMAGE="${OUT_DIR}/arch/${ARCH}/boot/Image"
        fi

        echo "SHORT_HASH=$SHORT_HASH" >> $GITHUB_OUTPUT
        echo "OUT_DIR=$OUT_DIR" >> $GITHUB_OUTPUT
        echo "KERNEL_TYPE=$KERNEL_TYPE" >> $GITHUB_OUTPUT
        echo "KERNEL_IMAGE=$KERNEL_IMAGE" >> $GITHUB_OUTPUT

    - name: Cache kernel image
      id: cache-kernel
      uses: actions/cache@v3
      with:
        key: ${{ matrix.kernel.version }}-${{ matrix.arch }}
        path: |
          ${{ steps.vars.outputs.KERNEL_IMAGE }}
          ${{ steps.vars.outputs.OUT_DIR }}/vmlinux

    - run: ls -lR
      if: ${{ steps.cache-kernel.outputs.cache-hit == 'true' }}

    - name: Build kernel
      if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
      uses: ./.github/actions/build-kernel
      with:
        os: ${{ matrix.os }}
        arch: ${{ matrix.arch }}
        ack: ${{ matrix.kernel.ack }}
        kernel-version: ${{ matrix.kernel.version }}

    - name: Rename kernel images
      run: |
        SUFFIX=${{ steps.vars.outputs.KERNEL_TYPE }}-${{ matrix.kernel.version }}-${{ matrix.arch }}
        cp ${{ steps.vars.outputs.KERNEL_IMAGE }} ${{ steps.vars.outputs.KERNEL_IMAGE }}-$SUFFIX
        cp ${{ steps.vars.outputs.OUT_DIR }}/vmlinux ${{ steps.vars.outputs.OUT_DIR }}/vmlinux-$SUFFIX

        echo "SUFFIX=$SUFFIX" >> $GITHUB_ENV

    - name: Upload kernel image artifact
      uses: actions/upload-artifact@v3
      with:
        name: kernel-image
        path: ${{ steps.vars.outputs.KERNEL_IMAGE }}-${{ env.SUFFIX }}

    - name: Upload vmlinux artifact
      uses: actions/upload-artifact@v3
      with:
        name: vmlinux
        path: ${{ steps.vars.outputs.OUT_DIR }}/vmlinux-${{ env.SUFFIX }}

  run:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        kernel: [{ack: 0, version: 5.10.164}, {ack: 0, version: 5.15.89}, {ack: 0, version: 6.1.7}, {ack: 1, version: android13-5.10-lts}]
        arch: [arm64, x86_64]
    runs-on: ubuntu-22.04
    env:
      ACK: ${{ matrix.kernel.ack }}
      ARCH: ${{ matrix.arch }}
    steps:
    - uses: actions/checkout@v3

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3

    - name: Install x86_64 dependencies
      if: ${{ matrix.arch == 'x86_64' }}
      shell: bash
      run: sudo apt update && sudo apt install -y qemu-system-x86

    - name: Install arm64 dependencies
      if: ${{ matrix.arch == 'arm64' }}
      shell: bash
      run: sudo apt update && sudo apt install -y qemu-system-arm

    - name: Set output variables
      id: vars
      run: |
        set -x

        if [ $ACK -eq 0 ]; then
          KERNEL_TYPE=linux
        else
          KERNEL_TYPE=ack
        fi

        SUFFIX=$KERNEL_TYPE-${{ matrix.kernel.version }}-${{ matrix.arch }}

        if [ $ARCH == x86_64 ]; then
          IMAGE_NAME=bzImage-$SUFFIX
        else
          IMAGE_NAME=Image-$SUFFIX
        fi

        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Initialize rootfs and initramfs
      run: |
        make rootfs-init
        ROOTFS=./rootfs-${{ matrix.arch }} make rootfs-init

        make cpio
        INITRAMFS_DIR=./rootfs/alpine-${{ matrix.arch }} make cpio CPIO_FILE=../../alpine-${{ matrix.arch }}.cpio.gz

    - name: Setup shared/init.sh
      run: |
        mkdir shared
        echo poweroff > shared/init.sh
        chmod +x shared/init.sh

    - run: ls -lR

    - name: Run kernel
      run: |
        QEMU_KERNEL_IMAGE=./kernel-image/$IMAGE_NAME make run
        QEMU_KERNEL_IMAGE=./kernel-image/$IMAGE_NAME ROOTFS=./rootfs-${{ matrix.arch }} make run
        QEMU_KERNEL_IMAGE=./kernel-image/$IMAGE_NAME INITRD=./alpine-${{ matrix.arch }}.cpio.gz make run
        QEMU_KERNEL_IMAGE=./kernel-image/$IMAGE_NAME CPU=2 MEM=2048M QEMU_EXTRA_ARGS="" QEMU_EXTRA_KERNEL_CMDLINE="nokaslr" make run

    - name: Upload rootfs artifact
      uses: actions/upload-artifact@v3
      with:
        name: rootfs
        path: rootfs/rootfs-${{ matrix.arch }}.img

  release:
    runs-on: ubuntu-22.04
    needs: [run, build]
    permissions:
      contents: write
    steps:

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3

    - run: ls -lR

    - name: Set output variables
      id: vars
      run: |
        set -x

        echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

    - name: Publish release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        tag_name: ${{ steps.vars.outputs.DATE }}-${{ needs.build.outputs.SHORT_HASH }}
        files: |
          vmlinux/*
          kernel-image/*
          rootfs/*
